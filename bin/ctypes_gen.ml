(*
 * Copyright (c) 2014 Thomas Gazagnaire <thomas@gazagnaire.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *)

open Cmdliner
open Printf

let headers =
  let doc = Arg.info
      ~docv:"FILE"
      ~doc:"List of C headers to include in the generated C stubs."
      ["headers"] in
  Arg.(value & opt (list string) [] & doc)

let name =
  let doc = Arg.info
      ~docv:"MODULE"
      ~doc:"The name of the library for which the user wrote some binding."
      [] in
  Arg.(required & pos 0 (some string) None & doc)

let ml_stubs name =
  let default = sprintf "%s_stubs.ml" name in
  let doc = Arg.info
      ~docv:"FILE"
      ~doc:"The name of the stub `.ml` file which will be generated."
      ["ml-stubs"] in
  default, Arg.(value & opt string default & doc)

let c_stubs name =
  let default = sprintf "%s_stubs.c" name in
  let doc = Arg.info
      ~docv:"FILE"
      ~doc:"The name of the stub `.c` file which will be generated."
      ["c-stubs"] in
  default, Arg.(value & opt string default & doc)

let funct name =
  let default = sprintf "%s_bindings.Make" name in
  let doc = Arg.info
      ~docv:"FUNCTOR"
      ~doc:"The name of the functor which defined the Ctypes bindings."
      ["functor"] in
  default, Arg.(value & opt (some string) None & doc)

let generator name =
  let default = sprintf "%s_generator" name in
  let doc = Arg.info
      ~docv:"FILE"
      ~doc:"The name of the generator source file."
      ["generator"] in
  default, Arg.(value & opt string default & doc)

let library name =
  let default = name in
  let doc = Arg.info
      ~docv:"FILE"
      ~doc:"The name of the library file."
      ["library"] in
  default, Arg.(value & opt string default & doc)

let output_generator_ml headers ml_stubs c_stubs funct generator library name =
  let buf = Buffer.create 1024 in
  let p fmt = bprintf buf fmt in
  p "(* Generated by Assemblage *)";
  p "let c_headers = [";
  List.iter (p "  \"#include <%s.h>\";") headers;
  p "]";
  p "";
  p "let main () =";
  p "  let ml_out = open_out \"%s\"" ml_stubs;
  p "  and c_out = open_out \"%s\"" c_stubs;
  p "  let ml_fmt = Format.formatter_of_out_channel ml_out";
  p "  and c_fmt = Format.formatter_of_out_channel c_out in";
  p "  List.iter (Format.fprintf c_fmt \"%%s@\n\") c_headers";
  p "  Cstubs.write_c c_fmt ~prefix:\"%s_stub_\" (module %s);" name funct;
  p "  Cstubs.write_ml ml_fmt ~prefix:\"%s_stub_\" (module %s);" name funct;
  p "  Format.pp_print_flush ml_fmt ();";
  p "Format.pp_print_flush c_fmt ();";
  p "close_out ml_out;";
  p "close_out c_out";
  let oc = open_out generator in
  output_string oc (Buffer.contents buf);
  close_out oc;
  let oc = open_out library in
  output_string oc "(* Generated by Assemblage. *)";
  close_out oc
