(*
 * Copyright (c) 2014 Thomas Gazagnaire <thomas@gazagnaire.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *)

open Project
open Printf

let (/) x y = Filename.concat x y

let (//) x y =
  match x with
  | None   -> y
  | Some x -> Filename.concat x y


module Variable = struct

  type assign = string

  type t = {
    name    : string;
    assign  : assign;
    contents: string;
  }

  let (=) name contents =
    { name; contents; assign = "=" }

  let (:=) name contents =
    { name; contents; assign = ":=" }

  let (+=) name contents =
    { name; contents; assign = "+=" }

  let subst t name ~input ~output =
    { name; assign = "=";
      contents = sprintf "$(${%s}:%s=%s)" t.name input output
    }

  let name t =
    sprintf "$(%s)" t.name

  let generate buf t =
    bprintf buf "%s %s %s\n" t.name t.assign t.contents

  let shell name command =
    { name; assign = "=";
      contents = sprintf "$(shell %s)" command
    }

  let files name ~dir ~ext =
    { name; assign = "=";
      contents = sprintf "$(wildcard %s/*.%s)" dir ext }

end

module Rule = struct

  type t = {
    name: string;
    targets: string list;
    prerequisites:string list;
    order_only_prerequisites:string list;
    recipe:string list;
  }

  let create ~name ~targets ~prereqs ?(order_only_prereqs=[]) ~recipe =
    { name; targets; prerequisites=prereqs; order_only_prerequisites=order_only_prereqs; recipe }

  let generate buf t =
    bprintf buf "%s: %s%s\n"
      (String.concat " " t.targets)
      (String.concat " " t.prerequisites)
      (match t.order_only_prerequisites with
       | []  -> ""
       | l   -> sprintf " | %s" (String.concat " " l));
    let () = match t.recipe with
      | [] -> bprintf buf "\t@\n"
      | l  -> List.iter (bprintf buf "\t%s\n") l
    in
    bprintf buf "\n"

  let target = "$@"
  let target_member = "$%"
  let prereq = "$<"
  let changed_prereqs = "$?"
  let prereqs = "$^"
  let dedup_prereqs = "$+"
  let stem = "$*"

end


type t = {
  header: string list;
  phony: string list;
  variables: Variable.t list;
  rules: Rule.t list;
}

let create ?(header=[]) ?(phony=[]) variables rules =
  { phony; header; variables; rules }

let generate ?(file="Makefile") t =
  let buf = Buffer.create 1024 in
  bprintf buf "# Generated by ocaml-makefile\n\n\n";
  List.iter (fun s ->
      Buffer.add_string buf s;
      Buffer.add_string buf "\n\n";
    ) t.header;
  let () = match t.phony with
    | [] -> ()
    | l  -> bprintf buf ".PHONY: %s\n\n" (String.concat " " l)
  in
  List.iter (Variable.generate buf) t.variables;
  bprintf buf "\n\n";
  List.iter (Rule.generate buf) t.rules;
  let oc = open_out file in
  output_string oc (Buffer.contents buf);
  close_out oc

(******************************************************************************)

module Unit: sig
  include (module type of Unit with type t = Unit.t)
  val rules: t -> Lib.t option -> Conf.t -> Rule.t list
  val variables: t -> Lib.t option -> Conf.t -> Variable.t list
end = struct

  type ext = {
    p4flags  : Variable.t option;
    compflags: Variable.t;
    prereqs  : string list;
  }

  let p4flags t _lib conf =
    match Unit.p4flags t conf with
    | [] -> None
    | l  ->
      let var = "P4FLAGS_" ^ Unit.name t in
      Some (Variable.(var := String.concat " " l))

  let compflags t _lib conf =
    let l = Unit.compflags t conf in
    let var = "COMPFLAGS_" ^ Unit.name t in
    Variable.(var := String.concat " " l)

  let prereqs t lib conf =
    let units = Dep.units (Unit.deps t) in
    let units = List.map (fun d ->
        match lib with
        | None   -> Conf.destdir conf / Unit.name d ^ ".cmi"
        | Some l -> Conf.destdir conf / Lib.name l / Unit.name d ^ ".cmi"
      ) units in
    let locals = Dep.libs (Unit.deps t) in
    let locals = List.map (fun l ->
        let units = Lib.units l in
        let cmxs = List.map (fun u ->
            Conf.destdir conf / Lib.name l / Unit.name u ^ ".cmx"
          ) units in
        let cmis = List.map (fun u ->
            Conf.destdir conf / Lib.name l / Unit.name u ^ ".cmi"
          ) units in
        (if Conf.native conf then cmxs else []) @ cmis
      ) locals in
    units @ List.concat locals

  let process t lib conf =
    let prereqs = prereqs t lib conf in
    let compflags = compflags t lib conf in
    let p4flags = p4flags t lib conf in
    { prereqs; compflags; p4flags }

  let rules t lib conf =

    let x = process t lib conf in

    let lib_name = match lib with
      | None   -> None
      | Some l -> Some (Lib.name l) in

    let pp = match x.p4flags with
      | None   -> ""
      | Some v -> sprintf " -pp 'camlp4o %s' " (Variable.name v) in

    let incl = match lib_name with
      | None   -> ""
      | Some l -> sprintf " -I %s " (Conf.destdir conf / l) in

    let target ext =
      Conf.destdir conf / (lib_name // Unit.name t ^ ext) in

    let source ext =
      Unit.dir t // Unit.name t ^ ext in

    let ln = (* link source file to target directory *)
      let aux ext =
        let source = source ext in
        let target = target ext in
        if Sys.file_exists source then
          [Rule.create ("ln" ^ ext)
             [target] [source]
             ((match lib_name with
                 | None   -> []
                 | Some d -> [sprintf "mkdir -p %s" (Conf.destdir conf / d)])
              @ [sprintf "ln -s $(shell pwd)/%s %s" source target])]
        else []
      in
      aux ".ml" @ aux ".mli"
    in

    let cmi = (* generate cmis *)
      let targets, prereqs =
        if Sys.file_exists (source ".mli") then [target ".cmi"], [target ".mli"]
        else [target ".cmo"; target ".cmi"], [target ".ml"] in
      [Rule.create "cmi"
         targets
         (prereqs @ x.prereqs)
         [sprintf "ocamlc -c %s%s%s %s" incl pp (Variable.name x.compflags) Rule.prereq]]
    in

    let cmo = (* Generate cmos *)
      if Sys.file_exists (source ".mli") then
        [Rule.create "cmo"
           [target ".cmo"]
           (target ".ml" :: target ".cmi" :: x.prereqs)
           [sprintf "ocamlc -c %s%s%s %s" incl pp (Variable.name x.compflags) Rule.prereq]]
      else
        []
    in

    let cmx = (* Generate cmxs *)
      if Conf.native conf then
        [Rule.create "cmx"
           [target ".cmx"]
           (target ".ml" :: target ".cmi" :: x.prereqs)
           [sprintf "ocamlopt -c %s%s%s %s" incl pp (Variable.name x.compflags) Rule.prereq]]
      else
        []
    in
    ln @ cmi @ cmo @ cmx

    let variables t lib conf =
      let x = process t lib conf in
      x.compflags :: match x.p4flags with
      | None   -> []
      | Some l -> [l]

    include Unit

end

module Lib: sig
  include (module type of Lib with type t = Lib.t)
  val rules: t -> Conf.t -> Rule.t list
  val variables: t -> Conf.t -> Variable.t list
end = struct

  let variables t conf =
    List.concat (List.map (fun u -> Unit.variables u (Some t) conf) (Lib.units t))

  let rules t conf =
    let file_u u ext = Conf.destdir conf / Lib.name t / Unit.name u ^ ext in
    let file ext     = Conf.destdir conf / Lib.name t ^ ext in
    let cma =
      let files = List.map (fun u -> file_u u ".cmo") (Lib.units t) in
      Rule.create "cma" [file ".cma"] files [
        sprintf "ocamlc -a %s -o %s" (String.concat " " files) Rule.target
      ] in
    let cmxa =
      let files = List.map (fun u -> file_u u  ".cmx") (Lib.units t) in
      Rule.create "cmxa" [file ".cmxa"] files [
        sprintf "ocamlopt -a %s -o %s" (String.concat " " files) Rule.target
      ] in
    (Rule.create (Lib.name t)
       [Lib.name t]
       ([file ".cma"] @ if Conf.native conf then [file ".cmxa"] else [])
       [])
    :: cma
    :: (if Conf.native conf then [cmxa] else [])
    @  List.concat (List.map (fun u -> Unit.rules u (Some t) conf) (Lib.units t))

  include Lib

end

let of_project ?file t =
  let libs = Project.libs t in
  let conf = Project.conf t in
  let variables = List.concat (List.map (fun t -> Lib.variables t conf) libs) in
  let rules = List.concat (List.map (fun t -> Lib.rules t conf) libs) in
  let main = Rule.create "main" ["all"] (List.map Lib.name libs) [] in
  let clean = Rule.create "clean" ["clean"] [] [
      "rm -f *~ **/*~";
      sprintf "rm -rf %s" (Conf.destdir conf);
    ] in
  let t = create
      ~phony:["all"; "clean"]
      variables
      (main :: clean :: rules) in
  generate ?file t
